// #include "redismodule.h"
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <stdint.h>
#include <stdio.h>
#include <time.h>
#include <inttypes.h>
#include <math.h>
// #include "rmutil/util.h"
// #include "rmutil/strings.h"
// #include "rmutil/test_util.h"
// #include "rmutil/alloc.h"



//##########################################################
//#
//#                    C Utilities
//#
//#########################################################

#define ID_LENGTH 31
#define ALLOWED_ID_CHARS "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"

char* string_append(char* a, const char* b)
{
    char* retstr = rm_malloc(strlen(a)+strlen(b));
    strcpy(retstr, a);
    strcat(retstr, b);
    // printf("printing: %s", retstr);
    RedisModule_Free(a);
    return retstr;
}


long long current_time_ms (void)
{
    long            ms; // Milliseconds
    time_t          s;  // Seconds
    struct timespec spec;

    clock_gettime(CLOCK_REALTIME, &spec);

    s  = spec.tv_sec*1000;
    ms = round(spec.tv_nsec / 1.0e6); // Convert nanoseconds to milliseconds

    return s+ms;
}

// Assumes 0 <= max <= RAND_MAX
// Returns in the closed interval [0, max]
long random_at_most(long max) {
    unsigned long
      // max <= RAND_MAX < ULONG_MAX, so this is okay.
      num_bins = (unsigned long) max + 1,
      num_rand = (unsigned long) RAND_MAX + 1,
      bin_size = num_rand / num_bins,
      defect   = num_rand % num_bins;

    long x;
    do {
     x = random();
    }
    // This is carefully written not to overflow
    while (num_rand - defect <= (unsigned long)x);

    // Truncated division is intentional
    return x/bin_size;
}

char* generate_id(void)
{
    char* uuid = rm_malloc((ID_LENGTH+1)*sizeof(char));
    long allowed_char_range = strlen(ALLOWED_ID_CHARS)-1;


    // Intializes random number generator
    srandom((unsigned) time(0));

    int i;
    for (i=0;i<ID_LENGTH;++i)
    {
        uuid[i] = ALLOWED_ID_CHARS[random_at_most(allowed_char_range)];
    }
    uuid[ID_LENGTH] = 0;
    return uuid;
}